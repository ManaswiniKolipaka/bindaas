<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013r2sp2

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM" xmlns:agt="http://www.altova.com/Mapforce/agt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="agt xs fn">
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template name="agt:var58_MapToSVG11_function">
		<xsl:param name="par0" as="node()"/>
		<ellipse xmlns="http://www.w3.org/2000/svg">
			<xsl:variable name="var8_resultof_map" as="xs:boolean+">
				<xsl:for-each select="$par0/ns0:spatialCoordinateCollection/ns0:SpatialCoordinate">
					<xsl:variable name="var7_cur" as="node()" select="."/>
					<xsl:variable name="var6_resultof_map" as="xs:boolean*">
						<xsl:for-each select="@xsi:type">
							<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var7_cur) = xs:QName('ns0:TwoDimensionSpatialCoordinate'))"/>
						</xsl:for-each>
					</xsl:variable>
					<xsl:sequence select="fn:exists($var6_resultof_map[.])"/>
				</xsl:for-each>
			</xsl:variable>
			<xsl:if test="fn:exists($var8_resultof_map[.])">
				<xsl:variable name="var11_resultof_filter" as="node()*">
					<xsl:for-each select="$par0/ns0:spatialCoordinateCollection/ns0:SpatialCoordinate">
						<xsl:variable name="var10_" as="node()" select="."/>
						<xsl:variable name="var9_resultof_map" as="xs:boolean*">
							<xsl:for-each select="@xsi:type">
								<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var10_) = xs:QName('ns0:TwoDimensionSpatialCoordinate'))"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:exists($var9_resultof_map[.])">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var12_resultof_map" as="xs:decimal*">
					<xsl:for-each select="$var11_resultof_filter">
						<xsl:sequence select="xs:decimal(xs:double(fn:string(@x)))"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var15_resultof_filter" as="node()*">
					<xsl:for-each select="$par0/ns0:spatialCoordinateCollection/ns0:SpatialCoordinate">
						<xsl:variable name="var14_" as="node()" select="."/>
						<xsl:variable name="var13_resultof_map" as="xs:boolean*">
							<xsl:for-each select="@xsi:type">
								<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var14_) = xs:QName('ns0:TwoDimensionSpatialCoordinate'))"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:exists($var13_resultof_map[.])">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var16_resultof_map" as="xs:decimal*">
					<xsl:for-each select="$var15_resultof_filter">
						<xsl:sequence select="xs:decimal(xs:double(fn:string(@x)))"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:attribute name="cx" namespace="" select="xs:string(((fn:min($var12_resultof_map) + fn:max($var16_resultof_map)) div xs:decimal('2')))"/>
			</xsl:if>
			<xsl:variable name="var19_resultof_map" as="xs:boolean+">
				<xsl:for-each select="$par0/ns0:spatialCoordinateCollection/ns0:SpatialCoordinate">
					<xsl:variable name="var18_cur" as="node()" select="."/>
					<xsl:variable name="var17_resultof_map" as="xs:boolean*">
						<xsl:for-each select="@xsi:type">
							<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var18_cur) = xs:QName('ns0:TwoDimensionSpatialCoordinate'))"/>
						</xsl:for-each>
					</xsl:variable>
					<xsl:sequence select="fn:exists($var17_resultof_map[.])"/>
				</xsl:for-each>
			</xsl:variable>
			<xsl:if test="fn:exists($var19_resultof_map[.])">
				<xsl:variable name="var22_resultof_filter" as="node()*">
					<xsl:for-each select="$par0/ns0:spatialCoordinateCollection/ns0:SpatialCoordinate">
						<xsl:variable name="var21_" as="node()" select="."/>
						<xsl:variable name="var20_resultof_map" as="xs:boolean*">
							<xsl:for-each select="@xsi:type">
								<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var21_) = xs:QName('ns0:TwoDimensionSpatialCoordinate'))"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:exists($var20_resultof_map[.])">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var23_resultof_map" as="xs:decimal*">
					<xsl:for-each select="$var22_resultof_filter">
						<xsl:sequence select="xs:decimal(xs:double(fn:string(@y)))"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var26_resultof_filter" as="node()*">
					<xsl:for-each select="$par0/ns0:spatialCoordinateCollection/ns0:SpatialCoordinate">
						<xsl:variable name="var25_" as="node()" select="."/>
						<xsl:variable name="var24_resultof_map" as="xs:boolean*">
							<xsl:for-each select="@xsi:type">
								<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var25_) = xs:QName('ns0:TwoDimensionSpatialCoordinate'))"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:exists($var24_resultof_map[.])">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var27_resultof_map" as="xs:decimal*">
					<xsl:for-each select="$var26_resultof_filter">
						<xsl:sequence select="xs:decimal(xs:double(fn:string(@y)))"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:attribute name="cy" namespace="" select="xs:string(((fn:min($var23_resultof_map) + fn:max($var27_resultof_map)) div xs:decimal('2')))"/>
			</xsl:if>
			<xsl:variable name="var30_resultof_map" as="xs:boolean+">
				<xsl:for-each select="$par0/ns0:spatialCoordinateCollection/ns0:SpatialCoordinate">
					<xsl:variable name="var29_cur" as="node()" select="."/>
					<xsl:variable name="var28_resultof_map" as="xs:boolean*">
						<xsl:for-each select="@xsi:type">
							<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var29_cur) = xs:QName('ns0:TwoDimensionSpatialCoordinate'))"/>
						</xsl:for-each>
					</xsl:variable>
					<xsl:sequence select="fn:exists($var28_resultof_map[.])"/>
				</xsl:for-each>
			</xsl:variable>
			<xsl:if test="fn:exists($var30_resultof_map[.])">
				<xsl:variable name="var33_resultof_filter" as="node()*">
					<xsl:for-each select="$par0/ns0:spatialCoordinateCollection/ns0:SpatialCoordinate">
						<xsl:variable name="var32_" as="node()" select="."/>
						<xsl:variable name="var31_resultof_map" as="xs:boolean*">
							<xsl:for-each select="@xsi:type">
								<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var32_) = xs:QName('ns0:TwoDimensionSpatialCoordinate'))"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:exists($var31_resultof_map[.])">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var34_resultof_map" as="xs:decimal*">
					<xsl:for-each select="$var33_resultof_filter">
						<xsl:sequence select="xs:decimal(xs:double(fn:string(@x)))"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var37_resultof_filter" as="node()*">
					<xsl:for-each select="$par0/ns0:spatialCoordinateCollection/ns0:SpatialCoordinate">
						<xsl:variable name="var36_" as="node()" select="."/>
						<xsl:variable name="var35_resultof_map" as="xs:boolean*">
							<xsl:for-each select="@xsi:type">
								<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var36_) = xs:QName('ns0:TwoDimensionSpatialCoordinate'))"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:exists($var35_resultof_map[.])">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var38_resultof_map" as="xs:decimal*">
					<xsl:for-each select="$var37_resultof_filter">
						<xsl:sequence select="xs:decimal(xs:double(fn:string(@x)))"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var41_resultof_filter" as="node()*">
					<xsl:for-each select="$par0/ns0:spatialCoordinateCollection/ns0:SpatialCoordinate">
						<xsl:variable name="var40_" as="node()" select="."/>
						<xsl:variable name="var39_resultof_map" as="xs:boolean*">
							<xsl:for-each select="@xsi:type">
								<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var40_) = xs:QName('ns0:TwoDimensionSpatialCoordinate'))"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:exists($var39_resultof_map[.])">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var42_resultof_map" as="xs:decimal*">
					<xsl:for-each select="$var41_resultof_filter">
						<xsl:sequence select="xs:decimal(xs:double(fn:string(@x)))"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:attribute name="rx" namespace="" select="xs:string((fn:max($var34_resultof_map) - ((fn:min($var38_resultof_map) + fn:max($var42_resultof_map)) div xs:decimal('2'))))"/>
			</xsl:if>
			<xsl:variable name="var45_resultof_map" as="xs:boolean+">
				<xsl:for-each select="$par0/ns0:spatialCoordinateCollection/ns0:SpatialCoordinate">
					<xsl:variable name="var44_cur" as="node()" select="."/>
					<xsl:variable name="var43_resultof_map" as="xs:boolean*">
						<xsl:for-each select="@xsi:type">
							<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var44_cur) = xs:QName('ns0:TwoDimensionSpatialCoordinate'))"/>
						</xsl:for-each>
					</xsl:variable>
					<xsl:sequence select="fn:exists($var43_resultof_map[.])"/>
				</xsl:for-each>
			</xsl:variable>
			<xsl:if test="fn:exists($var45_resultof_map[.])">
				<xsl:variable name="var48_resultof_filter" as="node()*">
					<xsl:for-each select="$par0/ns0:spatialCoordinateCollection/ns0:SpatialCoordinate">
						<xsl:variable name="var47_" as="node()" select="."/>
						<xsl:variable name="var46_resultof_map" as="xs:boolean*">
							<xsl:for-each select="@xsi:type">
								<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var47_) = xs:QName('ns0:TwoDimensionSpatialCoordinate'))"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:exists($var46_resultof_map[.])">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var49_resultof_map" as="xs:decimal*">
					<xsl:for-each select="$var48_resultof_filter">
						<xsl:sequence select="xs:decimal(xs:double(fn:string(@y)))"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var52_resultof_filter" as="node()*">
					<xsl:for-each select="$par0/ns0:spatialCoordinateCollection/ns0:SpatialCoordinate">
						<xsl:variable name="var51_" as="node()" select="."/>
						<xsl:variable name="var50_resultof_map" as="xs:boolean*">
							<xsl:for-each select="@xsi:type">
								<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var51_) = xs:QName('ns0:TwoDimensionSpatialCoordinate'))"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:exists($var50_resultof_map[.])">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var53_resultof_map" as="xs:decimal*">
					<xsl:for-each select="$var52_resultof_filter">
						<xsl:sequence select="xs:decimal(xs:double(fn:string(@y)))"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var56_resultof_filter" as="node()*">
					<xsl:for-each select="$par0/ns0:spatialCoordinateCollection/ns0:SpatialCoordinate">
						<xsl:variable name="var55_" as="node()" select="."/>
						<xsl:variable name="var54_resultof_map" as="xs:boolean*">
							<xsl:for-each select="@xsi:type">
								<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var55_) = xs:QName('ns0:TwoDimensionSpatialCoordinate'))"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:exists($var54_resultof_map[.])">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var57_resultof_map" as="xs:decimal*">
					<xsl:for-each select="$var56_resultof_filter">
						<xsl:sequence select="xs:decimal(xs:double(fn:string(@y)))"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:attribute name="ry" namespace="" select="xs:string((fn:max($var49_resultof_map) - ((fn:min($var53_resultof_map) + fn:max($var57_resultof_map)) div xs:decimal('2'))))"/>
			</xsl:if>
		</ellipse>
	</xsl:template>
	<xsl:template name="agt:var67_MapToSVG11_function">
		<xsl:param name="par0" as="node()"/>
		<xsl:sequence select="fn:concat(fn:concat(xs:string(xs:double(fn:string($par0/@x))), ','), xs:string(xs:double(fn:string($par0/@y))))"/>
	</xsl:template>
	<xsl:template name="agt:var77_MapToSVG11_function">
		<xsl:param name="par0" as="node()"/>
		<xsl:sequence select="fn:concat(fn:concat(xs:string(xs:double(fn:string($par0/@x))), ','), xs:string(xs:double(fn:string($par0/@y))))"/>
	</xsl:template>
	<xsl:template match="/">
		<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
			<xsl:for-each select="ns0:ImageAnnotation">
				<xsl:variable name="var1_geometricShapeCollection" as="node()?" select="ns0:geometricShapeCollection"/>
				<xsl:for-each select="$var1_geometricShapeCollection">
					<xsl:variable name="var5_resultof_filter" as="node()*">
						<xsl:for-each select="ns0:GeometricShape">
							<xsl:variable name="var3_" as="node()" select="."/>
							<xsl:variable name="var2_resultof_map" as="xs:boolean*">
								<xsl:for-each select="@xsi:type">
									<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var3_) = xs:QName('ns0:Ellipse'))"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var4_resultof_any" as="xs:boolean" select="fn:exists($var2_resultof_map[.])"/>
							<xsl:if test="$var4_resultof_any">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var5_resultof_filter">
						<xsl:call-template name="agt:var58_MapToSVG11_function">
							<xsl:with-param name="par0" select="." as="node()"/>
						</xsl:call-template>
					</xsl:for-each>
				</xsl:for-each>
				<xsl:for-each select="$var1_geometricShapeCollection">
					<xsl:variable name="var62_resultof_filter" as="node()*">
						<xsl:for-each select="ns0:GeometricShape">
							<xsl:variable name="var60_" as="node()" select="."/>
							<xsl:variable name="var59_resultof_map" as="xs:boolean*">
								<xsl:for-each select="@xsi:type">
									<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var60_) = xs:QName('ns0:MultiPoint'))"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var61_resultof_any" as="xs:boolean" select="fn:exists($var59_resultof_map[.])"/>
							<xsl:if test="$var61_resultof_any">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var62_resultof_filter">
						<xsl:variable name="var66_resultof_filter" as="node()*">
							<xsl:for-each select="ns0:spatialCoordinateCollection/ns0:SpatialCoordinate">
								<xsl:variable name="var64_" as="node()" select="."/>
								<xsl:variable name="var63_resultof_map" as="xs:boolean*">
									<xsl:for-each select="@xsi:type">
										<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var64_) = xs:QName('ns0:TwoDimensionSpatialCoordinate'))"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var65_resultof_any" as="xs:boolean" select="fn:exists($var63_resultof_map[.])"/>
								<xsl:if test="$var65_resultof_any">
									<xsl:sequence select="."/>
								</xsl:if>
							</xsl:for-each>
						</xsl:variable>
						<xsl:variable name="var68_resultof_map" as="xs:string*">
							<xsl:for-each select="$var66_resultof_filter">
								<xsl:call-template name="agt:var67_MapToSVG11_function">
									<xsl:with-param name="par0" select="." as="node()"/>
								</xsl:call-template>
							</xsl:for-each>
						</xsl:variable>
						<polyline>
							<xsl:attribute name="points" namespace="" select="fn:string-join($var68_resultof_map, ' ')"/>
						</polyline>
					</xsl:for-each>
				</xsl:for-each>
				<xsl:for-each select="$var1_geometricShapeCollection">
					<xsl:variable name="var72_resultof_filter" as="node()*">
						<xsl:for-each select="ns0:GeometricShape">
							<xsl:variable name="var70_" as="node()" select="."/>
							<xsl:variable name="var69_resultof_map" as="xs:boolean*">
								<xsl:for-each select="@xsi:type">
									<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var70_) = xs:QName('ns0:Polyline'))"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var71_resultof_any" as="xs:boolean" select="fn:exists($var69_resultof_map[.])"/>
							<xsl:if test="$var71_resultof_any">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var72_resultof_filter">
						<xsl:variable name="var76_resultof_filter" as="node()*">
							<xsl:for-each select="ns0:spatialCoordinateCollection/ns0:SpatialCoordinate">
								<xsl:variable name="var74_" as="node()" select="."/>
								<xsl:variable name="var73_resultof_map" as="xs:boolean*">
									<xsl:for-each select="@xsi:type">
										<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var74_) = xs:QName('ns0:TwoDimensionSpatialCoordinate'))"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var75_resultof_any" as="xs:boolean" select="fn:exists($var73_resultof_map[.])"/>
								<xsl:if test="$var75_resultof_any">
									<xsl:sequence select="."/>
								</xsl:if>
							</xsl:for-each>
						</xsl:variable>
						<xsl:variable name="var78_resultof_map" as="xs:string*">
							<xsl:for-each select="$var76_resultof_filter">
								<xsl:call-template name="agt:var77_MapToSVG11_function">
									<xsl:with-param name="par0" select="." as="node()"/>
								</xsl:call-template>
							</xsl:for-each>
						</xsl:variable>
						<polyline>
							<xsl:attribute name="points" namespace="" select="fn:string-join($var78_resultof_map, ' ')"/>
						</polyline>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
		</svg>
	</xsl:template>
</xsl:stylesheet>
